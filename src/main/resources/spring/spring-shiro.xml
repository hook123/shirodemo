<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">


    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="sampleRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
        <property name="cacheManager" ref="customShiroCacheManager"/>
    </bean>

    <bean id="customShiroCacheManager" class="org.joker.shirodemo.core.shiro.cache.CustomCacheManager">
        <property name="jedisManager" ref="jedisManager"/>
    </bean>

    <!-- 授权 认证 -->
    <bean id="sampleRealm" class="org.joker.shirodemo.core.shiro.MySampleRealm">
        <property name="credentialsMatcher" ref="hashedCredentialsMatcher"/>
        <!--启用缓存，默认关闭-->
        <property name="cachingEnabled" value="true"/>
        <!--启用身份验证缓存，即缓存AuthenticationInfo，默认false-->
        <property name="authenticationCachingEnabled" value="true"/>
        <!--启用授权缓存，即缓存AuthorizationInfo的信息，默认为false-->
        <property name="authorizationCachingEnabled" value="true"/>
    </bean>
    <!-- 凭证匹配器 info的密码比较器，其中实现了token中密码的加密-->
    <bean id="hashedCredentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="MD5"/>
        <property name="hashIterations" value="1024"/>
    </bean>


    <!--RememberMe管理类，Shiro默认就是这个，不设置也可以-->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>


    <!--RememberMe中的Cookie，默认就是这个-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--构造方法传参，定义cookie的名字，浏览器cookie中会显示,默认rememberMe-->
        <constructor-arg value="^_^rememberMe"/>
        <property name="httpOnly" value="true"/>
        <!--默认设置1年，这里设置30天，单位是秒-->
        <property name="maxAge" value="2592000"/>
    </bean>

    <!--Session管理器，默认为ServletContainerSessionManager,就是容器的session管理器-->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="sessionDao"/>
        <!-- 相隔多久检查一次session的有效性   -->
        <property name="sessionValidationInterval" value="1800000"/>
        <!-- session 有效时间为半小时 （毫秒单位）-->
        <property name="globalSessionTimeout" value="1800000"/>
        <!--<property name="sessionDAO" ref="customShiroSessionDAO"/>-->
        <!--session 监听，可以多个。 -->
        <property name="sessionListeners">
            <list>
                <ref bean="customSessionListener"/>
            </list>
        </property>
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <!-- 是否开启 检测，默认开启 -->
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <!-- 是否删除无效的，默认也是开启 -->
        <property name="deleteInvalidSessions" value="true"/>
        <!-- 会话Cookie模板 -->
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <!--Session持久化对象-->
    <bean id="sessionDao" class="org.joker.shirodemo.core.shiro.session.CustomShiroSessionDAO">
        <property name="iSessionRepository" ref="iSessionRepository"/>
    </bean>

    <!--Redis Session管理对象-->
    <bean id="iSessionRepository" class="org.joker.shirodemo.core.shiro.session.impl.SessionRepositoryImpl">
        <property name="jedisManager" ref="jedisManager"/>
    </bean>
    <!--SessionCookie模板-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="SID"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="1800000"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler"
          class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
        <!-- 间隔多少时间检查，不配置是60分钟 -->
        <property name="interval" value="18000000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!--Session监听器，实现超时清除Session-->
    <bean id="customSessionListener" class="org.joker.shirodemo.core.shiro.listener.CustomSessionListener">
        <!--暂时配置，此处要配实现类-->
        <!--<property name="shiroSessionRepository" value="org.joker.shirodemo.core.shiro.cache.JedisShiroSessionRepository"/>-->
    </bean>

    <!--Redis管理器-->
    <bean id="jedisManager" class="org.joker.shirodemo.core.redis.JedisManager">
        <property name="jedisPool">
            <ref bean="jedisPool"/>
        </property>
    </bean>

    <!--此过滤器必须与web.xml中的，过滤器同名-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!--登录url-->
        <property name="loginUrl" value="/login.html"/>
        <!--登录成功后跳转url-->
        <property name="successUrl" value="/admin/admin.html"/>
        <!--无权跳转url-->
        <property name="unauthorizedUrl" value="/unauth.html"/>
        <!--	初始配置，现采用自定义	-->
        <property name="filterChainDefinitions">
            <ref bean="shiroFilterChainDefinitions"/>
        </property>
        <!-- 读取初始自定义权限内容-->
    </bean>

    <!-- Shiro权限过滤过滤器定义 -->
    <!-- 具体配置需要拦截哪些 URL, 以及访问对应的 URL 时使用 Shiro 的什么 Filter 进行拦截.  -->
    <bean name="shiroFilterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                /framework/** = anon
                /images/** = anon
                /common/* = anon
                /* = anon
                /user/login.do = anon
                /** = user
            </value>
        </constructor-arg>
    </bean>
</beans>